@page "/GestionarPrestamos"
@inject LibroService libroService
@inject NavigationManager navigationManager

<div class="sort-container">
    <label for="sortSelect">Ordenar por:</label>
    <select id="sortSelect" @onchange="SortLibros">
        <option value="titulo">Título</option>
        <option value="autor">Autor</option>
        <option value="genero">Género</option>
        <option value="isbn">ISBN</option>
    </select>
</div>

@if (isLoading)
{
    <p>Cargando libros...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">
        <p>@errorMessage</p>
    </div>
}
else
{
    <ol style="--length: @Libros?.Count ?? 0" role="list">
        @if (Libros != null)
        {
            @foreach (var libro in Libros)
            {
                <li style="display: flex; justify-content: space-between; align-items: flex; margin-bottom: 40px;">
                    <div>
                        <h3>@libro.Titulo</h3>
                        <p style="color: black;"><strong>Autor:</strong> @libro.Autor</p>
                        <p style="color: black;"><strong>Género:</strong> @libro.Genero</p>
                        <p style="color: black;"><strong>ISBN:</strong> @libro.ISBN</p>

                        @if (libro.DisponiblePrestamo)
                        {
                            <button class="button" @onclick="() => PrestarLibro(libro)">
                                Prestar libro
                            </button>
                        }
                        else
                        {
                            <button class="button" @onclick="() => DevolverLibro(libro)">
                                Devolver libro
                            </button>
                        }
                    </div>
                    <div>
                        @if (libro.Portada != null)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(libro.Portada)" alt="Imagen de @libro.Titulo" class="book-cover">
                        }
                    </div>
                </li>
            }
        }
    </ol>

    @if (Libros == null || Libros.Count == 0)
    {
        <div id="mensaje-vacio" class="sin-elementos">
            <h2>No hay más libros prestados.</h2>
        </div>
    }
}

@code {
    private List<Libro> Libros;
    private string errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Libros = (await libroService.GetLibrosAsync())?.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los libros: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task PrestarLibro(Libro libro)
    {
        try
        {
            libro.VecesPrestado += 1;

            libro.DisponiblePrestamo = false;
            await libroService.ActualizarLibroAsync(libro);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al prestar el libro: {ex.Message}";
        }
    }

    private async Task DevolverLibro(Libro libro)
    {
        try
        {
            libro.DisponiblePrestamo = true;
            await libroService.ActualizarLibroAsync(libro);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al devolver el libro: {ex.Message}";
        }
    }

    private void SortLibros(ChangeEventArgs e)
    {
        string sortOption = e.Value.ToString();

        switch (sortOption)
        {
            case "titulo":
                Libros = Libros.OrderBy(l => l.Titulo).ToList();
                break;
            case "autor":
                Libros = Libros.OrderBy(l => l.Autor).ToList();
                break;
            case "genero":
                Libros = Libros.OrderBy(l => l.Genero).ToList();
                break;
            case "isbn":
                Libros = Libros.OrderBy(l => l.ISBN).ToList();
                break;
            default:
                break;
        }

        StateHasChanged();
    }
}
