@page "/GestionarUsuarios"
@inject UsuarioService usuarioService
@inject NavigationManager navigationManager
@inject AuthenticationStateProviderService authStateProvider
@using MiParte.Models
@using System.Security.Claims;



<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-5">
                        <h2>Gestión de <b>Usuarios</b></h2>
                    </div>
                    <div class="col-sm-7">
                        <NavLink class="nav-link" href="/crearusuario">
                            <button class="btn btn-secondary"><h6>Nuevo usuario</h6></button>
                        </NavLink>
                    </div>
                </div>
            </div>
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Username</th>
                        <th>IsAdmin</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in Usuarios)
                    {
                        <tr>
                            <td>@usuario.IdUsuario</td>
                            <td>@usuario.Username</td>
                            <td>@(usuario.IsAdmin ? "Admin" : "Usuario")</td>
                            <td>
                                <button class="btn btn-info" @onclick="() => EditarUsuario(usuario.IdUsuario)">Editar</button>
                                <button class="btn btn-danger" @onclick="() => ConfirmarEliminar(usuario.IdUsuario)">Eliminar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            @if (mostrandoFormularioEdicion)
            {
                <h3>Editar Usuario</h3>
                <EditForm Model="@usuarioEnEdicion" OnValidSubmit="@GuardarCambios">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="username">Username:</label>
                        <InputText id="username" @bind-Value="usuarioEnEdicion.Username" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="isAdmin">Is Admin:</label>
                        <InputCheckbox id="isAdmin" @bind-Value="usuarioEnEdicion.IsAdmin" class="form-control" />
                    </div>

                    <button type="submit" class="btn btn-primary">Guardar cambios</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private List<Usuario> Usuarios = new List<Usuario>();
    private bool isAdmin;
    private Usuario usuarioEnEdicion = null; // Para almacenar el usuario en edición
    private bool mostrandoFormularioEdicion = false;
    protected override async Task OnInitializedAsync()
    {
        // Obtén el estado de autenticación actual
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        isAdmin = authState.User.Identity?.IsAuthenticated == true && authState.User.Claims.Any(c => c.Type == ClaimTypes.Role && c.Value == "Admin");

        // Si no es administrador, redirige a LoginAdmin
        if (!isAdmin)
        {
            navigationManager.NavigateTo("/loginadmin");
            return;
        }

        // Si es administrador, carga los usuarios
        var usuarios = await usuarioService.ObtenerUsuariosAsync();
        Usuarios = usuarios?.ToList() ?? new List<Usuario>();
    }

    private void EditarUsuario(int id)
    {
        usuarioEnEdicion = Usuarios.FirstOrDefault(u => u.IdUsuario == id);
        if (usuarioEnEdicion != null)
        {
            mostrandoFormularioEdicion = true;
        }
    }

    private async Task GuardarCambios()
    {
        if (usuarioEnEdicion != null)
        {
            try
            {
                await usuarioService.ActualizarUsuarioAsync(usuarioEnEdicion);
                mostrandoFormularioEdicion = false;
                usuarioEnEdicion = null;

                // Recargar la lista de usuarios desde el servidor después de guardar cambios
                var usuarios = await usuarioService.ObtenerUsuariosAsync();
                Usuarios = usuarios?.ToList() ?? new List<Usuario>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al actualizar usuario: {ex.Message}");
            }
        }
    }

    private void CancelarEdicion()
    {
        mostrandoFormularioEdicion = false;
        usuarioEnEdicion = null;
    }

    private async Task ConfirmarEliminar(int id)
    {
        var usuario = Usuarios.FirstOrDefault(u => u.IdUsuario == id);
        if (usuario != null)
        {
            Usuarios.Remove(usuario);
            await usuarioService.EliminarUsuarioAsync(id); // Llama al servicio para eliminar del servidor
        }
    }
}
