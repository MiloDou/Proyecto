@page "/libros"
@inject LibroService libroService
@using BlazorWebAppMovies.Models
@using System.IO

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Libros</title>
</head>
<body>
    <div class="container">
      
        
        <EditForm Model="@nuevoLibro" OnValidSubmit="@GuardarLibro">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="titulo">Título</label>
            <div class="form-row">
                <div class="input-data">
                    <InputText id="titulo" class="form-control" @bind-Value="nuevoLibro.Titulo" required />
                    
                </div>
                <label for="genero">Género</label>
                <div class="input-data">
                    <InputText id="genero" class="form-control" @bind-Value="nuevoLibro.Genero" required />
                    
                </div>
            </div>
            <label for="autor">Autor</label>
            <div class="form-row">
                <div class="input-data">
                    <InputText id="autor" class="form-control" @bind-Value="nuevoLibro.Autor" required />
                    
                </div>
                <label for="isbn">ISBN</label>
                <div class="input-data">
                    <InputText id="isbn" class="form-control" @bind-Value="nuevoLibro.ISBN" required />
                    
                </div>
            </div>

            <div class="form-row">
                <div class="input-data">
                    <label for="estado">Disponible para Préstamo:</label>
                    <InputCheckbox id="estado" @bind-Value="nuevoLibro.DisponiblePrestamo" />
                </div>
                <div class="input-data">
                    <label for="portada">Portada:</label>
                    <InputFile id="portada" OnChange="@(async e => await SubirPortada(e))" />
                </div>
            </div>

            <div class="form-row submit-btn">
                <div class="input-data">
                    <button type="submit" class="btn effect01">
                        <span>Guardar</span>
                    </button>
                </div>
            </div>
        </EditForm>
    </div>

    @if (libros != null)
    {
        <table>
            <thead>
                <tr>
                    <th>Título</th>
                    <th>Autor</th>
                    <th>ISBN</th>
                    <th>Disponible para Préstamo</th>
                    <th>Portada</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var libro in libros)
                {
                    <tr>
                        <td>@libro.Titulo</td>
                        <td>@libro.Autor</td>
                        <td>@libro.ISBN</td>
                        <td>@(libro.DisponiblePrestamo ? "Sí" : "No")</td>
                        <td>
                            @if (libro.Portada != null)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(libro.Portada)" alt="Portada del libro" width="100" height="150" />
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</body>
</html>

@code {
    private Libro nuevoLibro = new Libro();
    private List<Libro> libros;

    protected override async Task OnInitializedAsync()
    {
        libros = (await libroService.GetLibrosAsync()).ToList();
    }

    private async Task SubirPortada(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            using var ms = new MemoryStream();
            await archivo.OpenReadStream().CopyToAsync(ms);
            nuevoLibro.Portada = ms.ToArray();
        }
    }

    private async Task GuardarLibro()
    {
        await libroService.AddLibroAsync(nuevoLibro);
        nuevoLibro = new Libro();  // Limpiar el formulario después de guardar
        libros = (await libroService.GetLibrosAsync()).ToList();  // Actualizar la lista de libros
    }
}
